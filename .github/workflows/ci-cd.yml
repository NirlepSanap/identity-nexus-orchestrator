
name: Identity Reconciliation CI/CD Pipeline

on:
  push:
    branches: [ main, develop, release/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: identity-reconciliation-api

jobs:
  # Security and Code Quality
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Test Stage
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: identity_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run unit tests
      run: |
        cd backend
        npm test -- --coverage --watchAll=false
      env:
        DB_HOST: localhost
        DB_NAME: identity_test_db
        DB_USER: postgres
        DB_PASSWORD: password
        DB_PORT: 5432
    
    - name: Run security audit
      run: |
        cd backend
        npm audit --audit-level=high
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage/lcov.info
        flags: unittests

  # Build and Push Docker Images
  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ['v1.0.0', 'v1.1.0', 'v2.0.0']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=${{ matrix.version }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Docker security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ matrix.version }}
        format: 'sarif'
        output: 'docker-trivy-results.sarif'
    
    - name: Upload Docker scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'docker-trivy-results.sarif'

  # Deploy to Kubernetes
  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Update kube config
      run: aws eks update-kubeconfig --name identity-cluster --region us-east-1
    
    - name: Deploy to Kubernetes
      run: |
        # Apply namespace configurations
        kubectl apply -f k8s/namespace.yaml
        
        # Apply RBAC configurations
        kubectl apply -f k8s/rbac.yaml
        
        # Apply deployments
        kubectl apply -f k8s/deployment.yaml
        
        # Apply HPA configurations
        kubectl apply -f k8s/hpa.yaml
        
        # Apply ingress configurations
        kubectl apply -f k8s/ingress.yaml
        
        # Wait for rollout to complete
        kubectl rollout status deployment/identity-api-v1 -n identity-v1 --timeout=300s
        kubectl rollout status deployment/identity-api-v1-1 -n identity-v1-1 --timeout=300s
        kubectl rollout status deployment/identity-api-v2 -n identity-v2 --timeout=300s
    
    - name: Verify deployment
      run: |
        kubectl get pods -n identity-v1
        kubectl get pods -n identity-v1-1  
        kubectl get pods -n identity-v2
        kubectl get svc -A | grep identity
        kubectl get ingress -A | grep identity

  # Post-deployment tests
  integration-tests:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run integration tests
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Test health endpoints
        curl -f https://api.identity-nexus.com/v1/health
        curl -f https://api.identity-nexus.com/v1.1/health
        curl -f https://api.identity-nexus.com/v2/health
        
        # Test identity endpoint
        curl -X POST https://api.identity-nexus.com/v2/identify \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","phoneNumber":"1234567890"}' \
          -f
    
    - name: Performance test
      run: |
        # Basic load test
        for i in {1..10}; do
          curl -X POST https://api.identity-nexus.com/v2/identify \
            -H "Content-Type: application/json" \
            -d "{\"email\":\"test$i@example.com\",\"phoneNumber\":\"123456789$i\"}" \
            -w "%{http_code} %{time_total}s\n" \
            -s -o /dev/null &
        done
        wait
        
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          Identity Reconciliation API deployment completed!
          Version: ${{ github.sha }}
          Status: ${{ job.status }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
